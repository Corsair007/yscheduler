package com.yeahmobi.yscheduler.model.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.ibatis.session.RowBounds;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.yeahmobi.yscheduler.common.Paginator;
import com.yeahmobi.yscheduler.model.Workflow;
import com.yeahmobi.yscheduler.model.WorkflowExample;
import com.yeahmobi.yscheduler.model.WorkflowExample.Criteria;
import com.yeahmobi.yscheduler.model.common.Constants;
import com.yeahmobi.yscheduler.model.dao.WorkflowDao;
import com.yeahmobi.yscheduler.model.service.WorkflowAuthorityService;
import com.yeahmobi.yscheduler.model.service.WorkflowService;
import com.yeahmobi.yscheduler.model.type.WorkflowStatus;

@Service
public class WorkflowServiceImpl implements WorkflowService {

    @Autowired
    private WorkflowDao              workflowDao;

    @Autowired
    private WorkflowAuthorityService workflowAuthorityService;

    public Workflow get(long id) {
        return this.workflowDao.selectByPrimaryKey(id);
    }

    public List<Workflow> list(int pageNum, Paginator paginator, long userId) {
        WorkflowExample example = new WorkflowExample();

        example.setOrderByClause("create_time DESC");

        authorityCheck(example, userId);

        int count = this.workflowDao.countByExample(example);

        paginator.setItemsPerPage(Constants.PAGE_SIZE);
        paginator.setItems(count);
        paginator.setPage(pageNum);

        int offset = paginator.getBeginIndex() - 1;
        int limit = Constants.PAGE_SIZE;

        RowBounds rowBounds = new RowBounds(offset, limit);

        List<Workflow> list = this.workflowDao.selectByExampleWithRowbounds(example, rowBounds);

        return list;
    }

    private void authorityCheck(WorkflowExample example, long userId) {
        List<Long> readonlyTaskIds = this.workflowAuthorityService.listReadonlyWorkflowIds(userId);
        List<Long> writableTaskIds = this.workflowAuthorityService.listWritableWorkflowIds(userId);

        List<Long> canShowTaskIds = new ArrayList<Long>();
        canShowTaskIds.addAll(readonlyTaskIds);
        canShowTaskIds.addAll(writableTaskIds);

        Criteria criteria1 = example.createCriteria();
        criteria1.andStatusNotEqualTo(WorkflowStatus.REMOVED).andOwnerEqualTo(userId);

        if ((canShowTaskIds != null) && !canShowTaskIds.isEmpty()) {
            Criteria criteria2 = example.or();
            criteria2.andStatusNotEqualTo(WorkflowStatus.REMOVED).andIdIn(canShowTaskIds);
        }
    }

    public void add(Workflow workflow) {
        Date time = new Date();
        workflow.setCreateTime(time);
        workflow.setUpdateTime(time);
        this.workflowDao.insertSelective(workflow);
    }

    public void update(Workflow workflow) {
        Date time = new Date();
        workflow.setUpdateTime(time);
        this.workflowDao.updateByPrimaryKeySelective(workflow);
    }

    public boolean canModify(long workflowId, long userId) {
        Workflow workflow = this.workflowDao.selectByPrimaryKey(workflowId);
        if (workflow != null) {
            if (workflow.getOwner() == userId) {
                return true;
            } else {
                List<Long> writableUsers = this.workflowAuthorityService.listWritableUser(workflowId);
                return (writableUsers != null) && writableUsers.contains(userId);
            }
        }

        return false;
    }

    public boolean nameExist(String name) {
        WorkflowExample example = new WorkflowExample();
        example.createCriteria().andNameEqualTo(name);
        return this.workflowDao.selectByExample(example).size() != 0;
    }

    public List<Workflow> listAll() {
        WorkflowExample example = new WorkflowExample();
        example.createCriteria().andStatusEqualTo(WorkflowStatus.OPEN);
        return this.workflowDao.selectByExample(example);
    }
}
