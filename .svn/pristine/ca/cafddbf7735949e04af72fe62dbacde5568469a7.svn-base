package com.yeahmobi.yscheduler.notice;

import java.util.HashMap;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.yeahmobi.yscheduler.common.VelocityUtil;
import com.yeahmobi.yscheduler.model.service.TaskInstanceService;
import com.yeahmobi.yscheduler.model.service.TaskService;
import com.yeahmobi.yscheduler.model.service.WorkflowInstanceService;
import com.yeahmobi.yscheduler.model.service.WorkflowService;

/**
 * @author Ryan Sun
 */
@Service
public class ContentHelper {

    @SuppressWarnings("unused")
    private static final Log        LOGGER       = LogFactory.getLog(ContentHelper.class);

    private static final String     TITLE_FILE   = "title.vm";

    private static final String     CONTENT_FILE = "mail.vm";

    private static final String     WORKFLOW_URL = "http://localhost:8080/workflow/instance/tasks?instanceId=";

    private static final String     TASK_URL     = "http://localhost:8080/task/instance/attempt?instanceId=";

    @Autowired
    private WorkflowService         workflowService;

    @Autowired
    private WorkflowInstanceService workflowInstanceService;

    @Autowired
    private TaskService             taskService;

    @Autowired
    private TaskInstanceService     taskInstanceService;

    public String generateTitle(long id, NoticeType type, NoticeStatus status) {
        Map<String, Object> map = buildMap(id, type, status);
        return VelocityUtil.build(map, TITLE_FILE);
    }

    public String getContent(long id, NoticeType type, NoticeStatus status) {
        Map<String, Object> map = buildMap(id, type, status);
        return VelocityUtil.build(map, CONTENT_FILE);
    }

    private Map<String, Object> buildMap(long id, NoticeType type, NoticeStatus status) {
        Map<String, Object> map = new HashMap<String, Object>();
        if (type == NoticeType.TASK) {
            String name = this.taskService.get(this.taskInstanceService.get(id).getTaskId()).getName();
            map.put("name", name);
            map.put("url", TASK_URL + id);
        } else if (type == NoticeType.WORKFLOW) {
            String name = this.workflowService.get(this.workflowInstanceService.get(id).getWorkflowId()).getName();
            map.put("name", name);
            map.put("url", WORKFLOW_URL + id);
        }
        map.put("noticeType", type.value());
        if (status == NoticeStatus.FAIL) {
            map.put("noticeLevel", NoticeLevel.ERROR);
        } else if ((status == NoticeStatus.SKIP) || (status == NoticeStatus.TIMEOUT) || (status == NoticeStatus.CANCEL)) {
            map.put("noticeLevel", NoticeLevel.WARNING);
        } else if (status == NoticeStatus.SUCCESS) {
            map.put("noticeLevel", NoticeLevel.INFO);
        }
        map.put("noticeStatus", status.value());

        return map;
    }

}
