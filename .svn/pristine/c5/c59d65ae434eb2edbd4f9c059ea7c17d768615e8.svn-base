package com.yeahmobi.yscheduler.notice;

import java.util.Date;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Transformer;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.yeahmobi.yscheduler.model.User;

/**
 * @author Ryan Sun
 */

@Service
public class DefaultNoticeService implements NoticeService {

    @SuppressWarnings("unused")
    private Log            LOGGER = LogFactory.getLog(DefaultNoticeService.class);

    @Autowired
    private ContentHelper  contentHelper;

    @Autowired
    private ReceiverHelper receiverHelper;

    @Autowired
    private EmailSender    emailSender;

    @Autowired
    private SmsSender      smsSender;

    @SuppressWarnings("unchecked")
    public void alert(String title, String content, List<User> to, boolean needSms) {

        List<String> emails = (List<String>) CollectionUtils.collect(to, new Transformer() {

            public Object transform(Object input) {
                return ((User) input).getEmail();
            }
        });
        List<String> teles = (List<String>) CollectionUtils.collect(to, new Transformer() {

            public Object transform(Object input) {
                return ((User) input).getTelephone();
            }
        });
        this.emailSender.send(new Message(title, content, emails));
        if (needSms) {
            this.smsSender.send(new Message(title, content, teles));
        }

    }

    public void workflowFail(long id) {
        List<User> to = this.receiverHelper.getReceivers(id, NoticeType.WORKFLOW);
        String title = this.contentHelper.generateTitle(id, NoticeType.WORKFLOW, NoticeStatus.FAIL);
        String content = this.contentHelper.getContent(id, NoticeType.WORKFLOW, NoticeStatus.FAIL);
        alert(title, content, to, true);
    }

    public void workflowTimeout(long id) {
        List<User> to = this.receiverHelper.getReceivers(id, NoticeType.WORKFLOW);
        String title = this.contentHelper.generateTitle(id, NoticeType.WORKFLOW, NoticeStatus.TIMEOUT);
        String content = this.contentHelper.getContent(id, NoticeType.WORKFLOW, NoticeStatus.TIMEOUT);
        alert(title, content, to, false);
    }

    public void workflowSkip(long id, Date scheduleTime) {
        List<User> to = this.receiverHelper.getReceivers(id, NoticeType.WORKFLOW);
        String title = this.contentHelper.generateTitle(id, NoticeType.WORKFLOW, NoticeStatus.SKIP);
        String content = this.contentHelper.getContent(id, NoticeType.WORKFLOW, NoticeStatus.SKIP);
        alert(title, content, to, false);
    }

    public void taskFail(long id) {
        List<User> to = this.receiverHelper.getReceivers(id, NoticeType.TASK);
        String title = this.contentHelper.generateTitle(id, NoticeType.TASK, NoticeStatus.FAIL);
        String content = this.contentHelper.getContent(id, NoticeType.TASK, NoticeStatus.FAIL);
        alert(title, content, to, true);
    }

    public void taskTimeout(long id) {
        List<User> to = this.receiverHelper.getReceivers(id, NoticeType.TASK);
        String title = this.contentHelper.generateTitle(id, NoticeType.TASK, NoticeStatus.TIMEOUT);
        String content = this.contentHelper.getContent(id, NoticeType.TASK, NoticeStatus.TIMEOUT);
        alert(title, content, to, false);
    }

    public void taskSkip(long id, Date scheduleTime) {
        List<User> to = this.receiverHelper.getReceivers(id, NoticeType.TASK);
        String title = this.contentHelper.generateTitle(id, NoticeType.TASK, NoticeStatus.SKIP);
        String content = this.contentHelper.getContent(id, NoticeType.TASK, NoticeStatus.SKIP);
        alert(title, content, to, false);

    }

    public void workflowCanncel(long id) {
        List<User> to = this.receiverHelper.getReceivers(id, NoticeType.WORKFLOW);
        String title = this.contentHelper.generateTitle(id, NoticeType.WORKFLOW, NoticeStatus.CANCEL);
        String content = this.contentHelper.getContent(id, NoticeType.WORKFLOW, NoticeStatus.CANCEL);
        alert(title, content, to, false);
    }

    public void taskCanncel(long id) {
        List<User> to = this.receiverHelper.getReceivers(id, NoticeType.TASK);
        String title = this.contentHelper.generateTitle(id, NoticeType.TASK, NoticeStatus.CANCEL);
        String content = this.contentHelper.getContent(id, NoticeType.TASK, NoticeStatus.CANCEL);
        alert(title, content, to, false);
    }

    public void workflowSuccess(long id) {
        List<User> to = this.receiverHelper.getReceivers(id, NoticeType.WORKFLOW);
        String title = this.contentHelper.generateTitle(id, NoticeType.WORKFLOW, NoticeStatus.SUCCESS);
        String content = this.contentHelper.getContent(id, NoticeType.WORKFLOW, NoticeStatus.SUCCESS);
        alert(title, content, to, false);
    }

    public void taskSuccess(long id) {
        List<User> to = this.receiverHelper.getReceivers(id, NoticeType.TASK);
        String title = this.contentHelper.generateTitle(id, NoticeType.TASK, NoticeStatus.SUCCESS);
        String content = this.contentHelper.getContent(id, NoticeType.TASK, NoticeStatus.SUCCESS);
        alert(title, content, to, false);

    }

}
