package com.yeahmobi.yscheduler.fileservice.impl;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.commons.io.IOUtils;

import com.yeahmobi.yscheduler.fileservice.FileEntry;
import com.yeahmobi.yscheduler.fileservice.FileKey;
import com.yeahmobi.yscheduler.fileservice.FileService;

/**
 * @author Abel.Cui
 * @date 2015/3/10
 */
public class DefaultFileServiceImpl implements FileService {

    private String basePath;

    public String getBasePath() {
        return this.basePath;
    }

    public void setBasePath(String basePath) {
        this.basePath = basePath;
    }

    public long store(FileKey fileKey, FileEntry fileEntry) throws Exception {

        long version = System.currentTimeMillis();
        StringBuffer sb = new StringBuffer(this.basePath);
        // 拼接存储路径
        splicePath(fileKey, version, sb);
        // 检查并创建目录
        createDirs(sb);
        // 写文件
        writeFile(fileEntry, sb);
        return version;

    }

    public FileEntry get(FileKey fileKey, long version) throws Exception {
        StringBuffer sb = new StringBuffer(this.basePath);
        splicePath(fileKey, version, sb);
        File file = new File(sb.toString());
        if (file.exists() && (file.listFiles().length > 0)) {
            InputStream inputStream;
            inputStream = new FileInputStream(file.listFiles()[0]);
            return new FileEntry(file.list()[0], new BufferedInputStream(inputStream));
        }
        throw new FileNotFoundException("该文件不存在！");
    }

    private void writeFile(FileEntry fileEntry, StringBuffer sb) throws Exception {
        FileOutputStream outputStream = new FileOutputStream(sb.append(fileEntry.getFileName()).toString());
        IOUtils.copy(fileEntry.getInputStream(), outputStream);
    }

    private void createDirs(StringBuffer sb) {
        File file = new File(sb.toString());
        if (!file.exists()) {
            file.mkdirs();
        }
    }

    // 拼接存储或下载路径
    private void splicePath(FileKey fileKey, long version, StringBuffer sb) {
        sb.append(IOUtils.DIR_SEPARATOR_UNIX).append(fileKey.getNameSpace()).append(IOUtils.DIR_SEPARATOR_UNIX);
        for (char k : fileKey.getKey().toCharArray()) {
            sb.append(k).append(IOUtils.DIR_SEPARATOR_UNIX);
        }
        if (version == 0) {
            File file = new File(sb.toString());
            if (file.exists() && (file.list().length > 0)) {
                version = Collections.max(this.str2Long(file.list()));
            }
        }
        sb.append(version).append(IOUtils.DIR_SEPARATOR_UNIX);
    }

    // 将字符串的时间戳转为Long型的
    private List<Long> str2Long(String[] strs) {
        List<Long> timeStamp = new ArrayList<Long>();
        for (String str : strs) {
            timeStamp.add(Long.valueOf(str));
        }
        return timeStamp;
    }

}
