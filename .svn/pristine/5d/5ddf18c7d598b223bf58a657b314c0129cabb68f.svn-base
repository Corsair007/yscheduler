<link href="${rc.contextPath}/assets/css/autocomplete.css" rel="stylesheet" />
<link href="${rc.contextPath}/assets/css/chosen.min.css" rel="stylesheet" />
<link href="${rc.contextPath}/static/css/custom.css" rel="stylesheet" />

<script type="text/javascript" src="${rc.contextPath}/assets/js/jquery.dataTables.min.js"></script>
<script type="text/javascript" src="${rc.contextPath}/assets/js/jquery.dataTables.bootstrap.js"></script>
<script src="${rc.contextPath}/assets/js/jquery.autocomplete.js" type="text/javascript"></script>
<script src="${rc.contextPath}/assets/js/chosen.jquery.min.js" type="text/javascript"></script>
<script src="${rc.contextPath}/assets/js/bootbox.min.js" type="text/javascript"></script>
<script src="${rc.contextPath}/assets/js/jquery.validate.min.js" type="text/javascript"></script>
<script src="${rc.contextPath}/static/js/validate.js" type="text/javascript"></script>

<script type="text/javascript">
	function dyniframesize(down) {
		var pTar = null;
		if (document.getElementById) {
			pTar = document.getElementById(down);
		} else {
			eval('pTar = ' + down + ';');
		}
		if (pTar && !window.opera) {
			//begin resizing iframe 
			pTar.style.display = "block"
			if (pTar.contentDocument && pTar.contentDocument.body.offsetHeight) {
				//ns6 syntax 
				pTar.height = pTar.contentDocument.body.offsetHeight;
			} else if (pTar.Document && pTar.Document.body.scrollHeight) {
				//ie5+ syntax 
				pTar.height = pTar.Document.body.scrollHeight;
			}
		}
	}
	var index = 0;
	function addTask() {
		var html = $("#taskRow").html();
		while (html.indexOf("[index]") != -1) {
			html = html.replace("[index]", index);
		}
		$("#taskTable").append(html);
		$(".chosen-select").chosen({});
		index++;
	};
	function removeTask(btn) {
		$(btn).parent().parent().remove();
	};

	function getTopo(form) {
		form.attr('action', '${rc.contextPath}/topo');
		form.attr('target', 'ifm');
		createTaskInner(form, null, null, null, true);
	}
	function buildTopoDone(data) {
		if (data.success == false) {
			app.alertError(data.errorMsg);
		} else {
			$('#topo').html(data.responseText);
		}
	}

	function createTask() {
		return createTaskInner($('#form'), createTaskDone, app.httpError, "${rc.contextPath}/workflow/create", false);
	}

	function createTaskInner(form, successFn, failFn, action, getTopo) {
		//遍历form，修改name，后缀添加i
		try {
			$.each($("#taskTable tr"), function(i, el) {
				var tds = $(el).children("td");
				$.each(tds, function(j, td) {
					var input = $(td).children("input");
					if (!(input.length > 0)) {
						input = $(td).children("label").children("input");
					}
					if (!(input.length > 0)) {
						input = $(td).children("select");
					}
					var name = input.attr("name");
					if (name) {
						//去掉下划线后面
						var _index = name.indexOf('_');
						if (_index != -1) {
							name = name.substring(0, _index);
						}
						//添加下划线和序号
						input.attr("name", name + '_' + i);
					}
				});
			});
		} catch (e) {
			console.log(e);
		}
		if (getTopo) {
			form.submit();
			return false;
		} else {
			$.ajax({
				type : form.attr('method'),
				url : action,
				data : form.serialize(),
				dataType : "json",
				success : successFn,
				error : failFn
			});
		}
		return false;
	};
	function createTaskDone(data) {
		if (data.success == false) {
			app.alertError(data.errorMsg);
		} else {
			window.location = window.contextPath + "/workflow";
		}
	};
	$("[rel=tooltip]").tooltip();
	$(document).ready(function() {
		app.onCrontabTip();
		$(".chosen-select").chosen({});
		var canSkip = $("input[name='canSkip']");
		var concurrent = $("input[name='concurrent']");
		var condition = $("input[name='condition']");
		function updateDisabledInput() {
			if (canSkip.prop('checked') == true) {
				concurrent.prop('disabled', true);
				condition.prop('disabled', true);
			} else {
				concurrent.prop('disabled', false);
				if (concurrent.prop('checked') == true) {
					condition.prop('disabled', true);
				} else {
					condition.prop('disabled', false);
				}
			}
		}
		canSkip.change(function(e) {
			updateDisabledInput();
		});
		concurrent.change(function(e) {
			updateDisabledInput();
		});
	});
</script>

