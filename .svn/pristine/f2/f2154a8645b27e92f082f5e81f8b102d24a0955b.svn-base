package com.yeahmobi.yscheduler.web.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.yeahmobi.yscheduler.model.Task;
import com.yeahmobi.yscheduler.model.type.TaskStatus;
import com.yeahmobi.yscheduler.model.type.TaskType;
import com.yeahmobi.yscheduler.web.service.AgentService;
import com.yeahmobi.yscheduler.web.service.AuthorityService;
import com.yeahmobi.yscheduler.web.service.DependencyService;
import com.yeahmobi.yscheduler.web.service.TaskService;
import com.yeahmobi.yscheduler.web.service.UserService;

/**
 * @author Ryan Sun
 */
@Controller
@RequestMapping(value = { "/task" })
public class TaskController extends AbstractController {

    private static final Logger LOGGER      = LoggerFactory.getLogger(TaskController.class);

    private static final String SCREEN_NAME = "task";

    @Autowired
    private TaskService         taskService;

    @Autowired
    private UserService         userService;

    @Autowired
    private AgentService        agentService;

    @Autowired
    private DependencyService   dependencyService;

    @Autowired
    private AuthorityService    authorityService;

    @RequestMapping(value = { "" }, method = RequestMethod.GET)
    @Transactional
    public ModelAndView task() {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("names", this.taskService.listName());
        map.put("types", TaskType.values());
        map.put("users", this.userService.list());
        map.put("agents", this.agentService.list());
        map.put("tasks", this.taskService.list());
        return screen(map, SCREEN_NAME, "create");
    }

    @RequestMapping(value = { "create" }, method = RequestMethod.POST)
    @Transactional
    public ModelAndView add(HttpServletRequest request, HttpServletResponse response) throws ServletException,
                                                                                     IOException {
        Map<String, Object> map = new HashMap<String, Object>();
        Task task = extractTaskFromRequest(request, true);
        map.put("notice", "添加失败，参数有误");

        String running = request.getParameter("running");
        if ("on".equals(running)) {
            task.setStatus(TaskStatus.OPEN);
        } else {
            task.setStatus(TaskStatus.PAUSED);
        }
        String dependencies = request.getParameter("dependency");
        String followers = request.getParameter("notice");
        String readers = request.getParameter("readers");
        String writers = request.getParameter("writers");

        this.taskService.add(task);
        this.dependencyService.add(parse(dependencies), task.getId());
        this.authorityService.add(parse(readers), parse(writers), parse(followers), task.getId());
        map.put("notice", "添加成功");
        return new ModelAndView("redirect:/schedule", map);
    }

    @RequestMapping(value = { "update" }, method = RequestMethod.POST)
    public ModelAndView update(HttpServletRequest request, HttpServletResponse response) throws ServletException,
                                                                                        IOException {
        Map<String, Object> map = new HashMap<String, Object>();
        Task task = extractTaskFromRequest(request, false);
        if (task == null) {
            map.put("notice", "修改失败");
            return null;
        }
        String dependencies = request.getParameter("dependency");
        String followers = request.getParameter("notice");
        String readers = request.getParameter("readers");
        String writers = request.getParameter("writers");
        this.taskService.update(task);
        if (dependencies != null) {
            this.dependencyService.update(parse(dependencies), task.getId());
        }
        if ((readers != null) || (writers != null) || (followers != null)) {
            this.authorityService.update(parse(readers), parse(writers), parse(followers), task.getId());
        }
        map.put("notice", "修改成功");
        return new ModelAndView("redirect:/schedule", map);
    }

    private List<Long> parse(String value) {
        List<Long> result = new ArrayList<Long>();
        if (value == null) {
            return result;
        }
        try {
            for (String item : value.split(",")) {
                long itemVal = Long.parseLong(item);
                result.add(itemVal);
            }
        } catch (NumberFormatException e) {
            LOGGER.error(e.getMessage(), e);
        }
        return result;

    }

    private Task extractTaskFromRequest(HttpServletRequest request, boolean isNew) {
        // try {
        Task result = new Task();
        String agent = request.getParameter("agent");
        if (agent != null) {
            long agentId = Long.parseLong(agent);
            result.setAgentId(agentId);
        }

        long owner = Long.parseLong(request.getParameter("owner"));
        String retry = request.getParameter("retryTimes");
        if (StringUtils.isNotBlank(retry) && StringUtils.isNumeric(retry)) {
            int retryTimes = Integer.parseInt(retry);
            result.setRetryTimes(retryTimes);
        } else {
            result.setRetryTimes(0);
        }
        String timeoutStr = request.getParameter("timeout");
        if (timeoutStr != null) {
            int timeout = Integer.parseInt(timeoutStr);
            result.setTimeout(timeout);
        }

        if (isNew) {
            int type = Integer.parseInt(request.getParameter("type"));
            result.setType(TaskType.valueOf(type));
            result.setName(request.getParameter("name"));
        } else {
            result.setId(Long.parseLong(request.getParameter("id")));
        }
        result.setOwner(owner);

        result.setCrontab(request.getParameter("crontab"));
        result.setCommand(request.getParameter("command"));
        result.setDescription(request.getParameter("description"));
        return result;
        // } catch (Exception e) {
        // LOGGER.error("获取任务表单数据时发生错误", e);
        // return null;
        // }
    }
}
