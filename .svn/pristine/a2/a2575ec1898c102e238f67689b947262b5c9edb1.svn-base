package com.yeahmobi.yscheduler.variable;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.yeahmobi.yscheduler.model.Task;
import com.yeahmobi.yscheduler.model.TaskInstance;
import com.yeahmobi.yscheduler.model.WorkflowInstance;
import com.yeahmobi.yscheduler.model.service.WorkflowInstanceService;
import com.yeahmobi.yscheduler.model.service.WorkflowService;

@Service
public class VariableManager {

    @Autowired
    private WorkflowService              workflowService;

    @Autowired
    private WorkflowInstanceService      workflowInstanceService;

    private static final String          VARIABLE_START   = "${";

    private static final String          VARIABLE_END     = "}";

    private static final String          VARIABLE_SPLIT   = ":";

    private Map<String, VariableHandler> variableHandlers = new HashMap<String, VariableHandler>();

    @PostConstruct
    public void register() {
        this.variableHandlers.put(ScheduleTimeHandler.VARIABLE_NAME, new ScheduleTimeHandler());
    }

    public String process(String command, VariableContext context) throws VariableException {
        while (true) {
            int start = command.indexOf(VARIABLE_START);
            if (start < 0) {
                return command;
            }
            int end = command.indexOf(VARIABLE_END, start);
            if (end < 0) {
                return command;
            }
            String variable = command.substring(start + VARIABLE_START.length(), end);
            String variableName = variable;
            String variableParam = "";
            int split = variable.indexOf(VARIABLE_SPLIT);
            if (split >= 0) {
                variableName = variable.substring(0, split);
                if (split < variable.length()) {
                    variableParam = variable.substring(split + 1);
                }
            }
            VariableHandler handler = this.variableHandlers.get(variableName);
            if (handler == null) {
                throw new VariableException(String.format("变量名(%s)不存在", variableName));
            }
            String value = handler.process(variableParam, context);
            command = command.substring(0, start) + value + command.substring(end + 1);
        }
    }

    public VariableContext createContext(Task task, TaskInstance instance) {
        VariableContext context = new VariableContext();
        context.setTask(task);
        context.setTaskIntance(instance);
        Long workflowInstanceId = instance.getWorkflowInstanceId();
        if (workflowInstanceId != null) {
            WorkflowInstance workflowInstance = this.workflowInstanceService.get(workflowInstanceId);
            context.setWorkflowInstance(workflowInstance);
            context.setWorkflow(this.workflowService.get(workflowInstance.getWorkflowId()));
        }
        return context;
    }

}
